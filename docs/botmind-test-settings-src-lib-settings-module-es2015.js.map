{"version":3,"sources":["./libs/settings/src/lib/+state/settings.effects.ts","./libs/settings/src/lib/settings/settings.component.ts","./libs/settings/src/lib/settings/settings.component.html","./libs/settings/src/lib/+state/settings.actions.ts","./libs/settings/src/lib/settings.module.ts","./libs/settings/src/lib/settings.service.ts"],"names":[],"mappings":"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","file":"botmind-test-settings-src-lib-settings-module-es2015.js","sourcesContent":["import { AuthFacade, getUser } from '@botmind-test/auth';\nimport { NgrxFormsFacade, setErrors } from '@botmind-test/ngrx-forms';\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, withLatestFrom } from 'rxjs/operators';\n\nimport { SettingsService } from '../settings.service';\nimport * as SettingsActions from './settings.actions';\nimport { go } from '@botmind-test/ngrx-router';\n\n@Injectable()\nexport class SettingsEffects {\n  editSettings = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SettingsActions.editSettings),\n      withLatestFrom(this.ngrxFormsFacade.data$, this.authFacade.user$),\n      map(([_, data, user]) => ({\n        ...user,\n        image: data.image,\n        username: data.username,\n        bio: data.bio,\n        pass: data.pass,\n        email: data.email,\n      })),\n      concatMap((data) =>\n        this.settingsService.update(data).pipe(\n          mergeMap((result) => [\n            getUser(),\n            go({\n              to: { path: ['profile', result.user.username] },\n            }),\n          ]),\n          catchError((result) => of(setErrors({ errors: result.error.errors }))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private settingsService: SettingsService,\n    private authFacade: AuthFacade,\n    private ngrxFormsFacade: NgrxFormsFacade,\n  ) {}\n}\n","import { AuthFacade } from '@botmind-test/auth';\nimport { Field, NgrxFormsFacade } from '@botmind-test/ngrx-forms';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { editSettings } from '../+state/settings.actions';\n\nconst structure: Field[] = [\n  {\n    type: 'INPUT',\n    name: 'image',\n    placeholder: 'URL of profile picture',\n    validator: [],\n  },\n  {\n    type: 'INPUT',\n    name: 'username',\n    placeholder: 'Your Name',\n    validator: [Validators.required],\n  },\n  {\n    type: 'TEXTAREA',\n    name: 'bio',\n    placeholder: 'Short bio about you',\n    validator: [],\n  },\n  {\n    type: 'INPUT',\n    name: 'email',\n    placeholder: 'Email',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'password',\n    placeholder: 'New Password',\n    validator: [Validators.required],\n    attrs: {\n      type: 'password',\n    },\n  },\n];\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettingsComponent implements OnInit {\n  structure$: Observable<Field[]>;\n  data$: Observable<any>;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private authFacade: AuthFacade,\n    private ngrxFormsFacade: NgrxFormsFacade,\n  ) {}\n\n  ngOnInit() {\n    this.ngrxFormsFacade.setStructure(structure);\n    this.authFacade.user$.subscribe((user) => this.ngrxFormsFacade.setData(user));\n    this.data$ = this.ngrxFormsFacade.data$;\n    this.structure$ = this.ngrxFormsFacade.structure$;\n  }\n\n  updateForm(changes: any) {\n    this.ngrxFormsFacade.updateData(changes);\n  }\n\n  submit() {\n    this.store.dispatch(editSettings());\n  }\n\n  logout() {\n    this.authFacade.logout();\n  }\n}\n","<div class=\"settings-page\">\r\n  <div class=\"container page\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 offset-md-3 col-xs-12\">\r\n        <h1 class=\"text-xs-center\">Your Settings</h1>\r\n\r\n        <app-list-errors></app-list-errors>\r\n\r\n        <app-dynamic-form (updateForm)=\"updateForm($event)\" [data$]=\"data$\" [structure$]=\"structure$\">\r\n        </app-dynamic-form>\r\n        <div class=\"edit-button-container\">\r\n          <button (click)=\"submit()\" class=\"btn btn-lg btn-primary pull-xs-right\" type=\"submit\">\r\n            Update Settings\r\n          </button>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <button class=\"btn btn-outline-danger\" (click)=\"logout()\">\r\n          Or click here to logout.\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { createAction } from '@ngrx/store';\r\n\r\nexport const editSettings = createAction('[settings] EDIT_SETTINGS');\r\n","import { AuthGuardService } from '@botmind-test/auth';\nimport { NgrxFormsModule } from '@botmind-test/ngrx-forms';\nimport { SettingsService } from './settings.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { SettingsEffects } from './+state/settings.effects';\nimport { SettingsComponent } from './settings/settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgrxFormsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: SettingsComponent,\n        canActivate: [AuthGuardService],\n      },\n    ]),\n    EffectsModule.forFeature([SettingsEffects]),\n  ],\n  declarations: [SettingsComponent],\n  providers: [SettingsEffects, SettingsService],\n})\nexport class SettingsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService, User, UserResponse } from '@botmind-test/api';\nimport { UpdateUserRequest } from '@botmind-test/settings/settings.interfaces';\n\n@Injectable()\nexport class SettingsService {\n  constructor(private apiService: ApiService) {}\n\n  update(user: User): Observable<UserResponse> {\n    return this.apiService.put<UserResponse, UpdateUserRequest>('/user', { user });\n  }\n}\n"],"sourceRoot":"webpack:///"}
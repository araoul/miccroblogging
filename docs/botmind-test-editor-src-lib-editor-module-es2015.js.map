{"version":3,"sources":["./libs/editor/src/lib/article-editor/article-editor.component.ts","./libs/editor/src/lib/article-editor/article-editor.component.html","./libs/editor/src/lib/editor.module.ts","./libs/editor/src/lib/+state/editor.effects.ts","./libs/editor/src/lib/editor-resolver.service.ts","./libs/editor/src/lib/+state/editor.facade.ts","./libs/editor/src/lib/+state/editor.selectors.ts","./libs/editor/src/lib/+state/editor.actions.ts","./libs/editor/src/lib/+state/editor.reducer.ts","./libs/editor/src/lib/editor.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkE;AACS;AAE/B;AACH;AAGc;;;;;;;AAEvD,MAAM,SAAS,GAAY;IACzB;QACE,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,eAAe;QAC5B,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC;KACjC;IACD;QACE,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,aAAa;QACnB,WAAW,EAAE,4BAA4B;QACzC,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC;KACjC;IACD;QACE,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,kCAAkC;QAC/C,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC;KACjC;IACD;QACE,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,YAAY;QACzB,SAAS,EAAE,EAAE;KACd;CACF,CAAC;AAQK,MAAM,sBAAsB;IAIjC,YAAoB,eAAgC,EAAU,MAAc,EAAU,MAAoB;QAAtF,oBAAe,GAAf,eAAe,CAAiB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAc;IAAG,CAAC;IAE9G,QAAQ;QACN,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QAClD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,UAAU,CAAC,OAAY;QACrB,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;IAC/B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;IAClC,CAAC;;4FAxBU,sBAAsB;sGAAtB,sBAAsB;QC1CnC,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,6EAAmC;QAEnC,sFACA;QADkB,wKAAc,sBAAkB,IAAC;QACnD,4DAAmB;QAEnB,4EACE;QADiE,8IAAS,YAAQ,IAAC;QACnF,4EACF;QAAA,4DAAS;QACX,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;QATsD,0DAAe;QAAf,4EAAe;;6FDoC9D,sBAAsB;cANlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;gBAC7C,eAAe,EAAE,qEAAuB,CAAC,MAAM;aAChD;;;;;;;;;;;;;;AEzCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACK;AACZ;AACN;AACM;AACD;AACJ;AAEc;AACF;AACwC;AACX;AACjB;AACjB;;;;;AA4B1C,MAAM,YAAY;;2FAAZ,YAAY;kJAAZ,YAAY,mBAFZ,CAAC,mEAAa,EAAE,8DAAa,EAAE,+EAAqB,EAAE,iEAAY,CAAC,YAvBrE;YACP,4DAAY;YACZ,wEAAe;YACf,4DAAY,CAAC,QAAQ,CAAC;gBACpB;oBACE,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,MAAM;oBACjB,SAAS,EAAE,gGAAsB;oBACjC,OAAO,EAAE,EAAE,sGAAqB,EAAE;oBAClC,WAAW,EAAE,CAAC,mEAAgB,CAAC;iBAChC;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,SAAS,EAAE,gGAAsB;oBACjC,OAAO,EAAE,EAAE,sGAAqB,EAAE;iBACnC;aACF,CAAC;YACF,uDAAW,CAAC,UAAU,CAAC,sEAAgB,EAAE,mEAAa,EAAE;gBACtD,YAAY,EAAE,wEAAkB;aACjC,CAAC;YACF,2DAAa,CAAC,UAAU,CAAC,CAAC,mEAAa,CAAC,CAAC;SAC1C;mIAIU,YAAY,mBAHR,gGAAsB,aArBnC,4DAAY;QACZ,wEAAe;6FAuBN,YAAY;cA1BxB,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY;oBACZ,wEAAe;oBACf,4DAAY,CAAC,QAAQ,CAAC;wBACpB;4BACE,IAAI,EAAE,EAAE;4BACR,SAAS,EAAE,MAAM;4BACjB,SAAS,EAAE,gGAAsB;4BACjC,OAAO,EAAE,EAAE,sGAAqB,EAAE;4BAClC,WAAW,EAAE,CAAC,mEAAgB,CAAC;yBAChC;wBACD;4BACE,IAAI,EAAE,OAAO;4BACb,SAAS,EAAE,gGAAsB;4BACjC,OAAO,EAAE,EAAE,sGAAqB,EAAE;yBACnC;qBACF,CAAC;oBACF,uDAAW,CAAC,UAAU,CAAC,sEAAgB,EAAE,mEAAa,EAAE;wBACtD,YAAY,EAAE,wEAAkB;qBACjC,CAAC;oBACF,2DAAa,CAAC,UAAU,CAAC,CAAC,mEAAa,CAAC,CAAC;iBAC1C;gBACD,YAAY,EAAE,CAAC,gGAAsB,CAAC;gBACtC,SAAS,EAAE,CAAC,mEAAa,EAAE,8DAAa,EAAE,+EAAqB,EAAE,iEAAY,CAAC;aAC/E;;;;;;;;;;;;;;ACxCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsE;AAC3B;AACmB;AACpC;AACkD;AAE1B;AACA;AACH;;;;;AAGxC,MAAM,aAAa;IA+BxB,YACU,QAAiB,EACjB,eAAgC,EAChC,aAA4B;QAF5B,aAAQ,GAAR,QAAQ,CAAS;QACjB,oBAAe,GAAf,eAAe,CAAiB;QAChC,kBAAa,GAAb,aAAa,CAAe;QAjCtC,oBAAe,GAAG,kEAAY,CAAC,GAAG,EAAE,CAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,4DAAM,CAAC,8DAA4B,CAAC,EACpC,qEAAc,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAC1C,gEAAS,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CACtB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI;QAC1C,qEAAqE;QACrE,0DAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACb,oEAAE,CAAC;YACD,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;SAC/C,CAAC,CACH,EACD,iEAAU,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,+CAAE,CAAC,0EAAS,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CACvE,CACF,CACF,CACF,CAAC;QAEF,iBAAY,GAAG,kEAAY,CAAC,GAAG,EAAE,CAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,4DAAM,CAAC,2DAAyB,CAAC,EACjC,gEAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CACnB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CACpC,0DAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,kEAAgC,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,EAClF,iEAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,+CAAE,CAAC,+DAA6B,CAAC,KAAK,CAAC,CAAC,CAAC,CAChE,CACF,CACF,CACF,CAAC;IAMC,CAAC;;0EAnCO,aAAa;gGAAb,aAAa,WAAb,aAAa;6FAAb,aAAa;cADzB,wDAAU;;;;;;;;;;;;;;ACVX;AAAA;AAAA;AAAA;AAAA;AAA2C;AAGL;AAEgB;;;AAG/C,MAAM,qBAAqB;IAChC,YAAoB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;IAAG,CAAC;IAE5C,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC/D,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC/B;QACD,OAAO,+CAAE,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;;0FATU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB;6FAArB,qBAAqB;cADjC,wDAAU;;;;;;;;;;;;;;ACNX;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACP;AAEc;AAED;;;AAG1C,MAAM,YAAY;IAGvB,YAAoB,KAAyB;QAAzB,UAAK,GAAL,KAAK,CAAoB;QAF7C,aAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,6DAAW,CAAC,UAAU,CAAC,CAAC;IAEL,CAAC;IAEjD,WAAW,CAAC,EAAU;QACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,2DAAyB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,kBAAkB,CAAC,OAAgB;QACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kEAAgC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,eAAe,CAAC,KAAY;QAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,+DAA6B,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,8DAA4B,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,iEAA+B,EAAE,CAAC,CAAC;IACzD,CAAC;;wEAvBU,YAAY;+FAAZ,YAAY,WAAZ,YAAY;6FAAZ,YAAY;cADxB,wDAAU;;;;;;;;;;;;;;ACRX;AAAA;AAAA;AAAA;AAAA;AAAoE;AACR;AAE5D,MAAM,SAAS,GAAG,yEAAqB,CAAS,gEAAgB,CAAC,CAAC;AAC3D,MAAM,UAAU,GAAG,kEAAc,CAAC,SAAS,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAE/E,MAAM,WAAW,GAAG;IACzB,UAAU;CACX,CAAC;;;;;;;;;;;;;ACPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAE3C,MAAM,cAAc,GAAG,gEAAY,CAAC,0BAA0B,CAAC,CAAC;AAChE,MAAM,iBAAiB,GAAG,gEAAY,CAAC,6BAA6B,CAAC,CAAC;AACtE,MAAM,WAAW,GAAG,gEAAY,CAAC,uBAAuB,EAAE,yDAAK,EAAkB,CAAC,CAAC;AACnF,MAAM,kBAAkB,GAAG,gEAAY,CAAC,+BAA+B,EAAE,yDAAK,EAAwB,CAAC,CAAC;AACxG,MAAM,eAAe,GAAG,gEAAY,CAAC,4BAA4B,EAAE,yDAAK,EAAoB,CAAC,CAAC;;;;;;;;;;;;;ACLrG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACN;AAE3C,MAAM,gBAAgB,GAAG,QAAQ,CAAC;AAUlC,MAAM,kBAAkB,GAAW;IACxC,OAAO,EAAE;QACP,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,IAAI,EAAE,EAAE;QACR,OAAO,EAAE,EAAE;QACX,SAAS,EAAE,EAAE;QACb,SAAS,EAAE,EAAE;QACb,SAAS,EAAE,KAAK;QAChB,cAAc,EAAE,CAAC;QACjB,MAAM,EAAE;YACN,QAAQ,EAAE,EAAE;YACZ,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,EAAE;YACT,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,KAAK;SACf;KACF;CACF,CAAC;AAEF,MAAM,OAAO,GAAG,iEAAa,CAC3B,kBAAkB,EAClB,sDAAE,CAAC,kEAAgC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,iCAAM,KAAK,KAAE,OAAO,EAAE,MAAM,CAAC,OAAO,IAAG,CAAC,EAChG,sDAAE,CAAC,+DAA6B,EAAE,iEAA+B,EAAE,GAAG,EAAE,CAAC,kBAAkB,CAAC,CAC7F,CAAC;AAEK,SAAS,aAAa,CAAC,KAAyB,EAAE,MAAc;IACrE,OAAO,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAChC,CAAC;;;;;;;;;;;;;AC5CD;AAAA;AAAA;AAAA;AAA2C;AAEoC;;;AAIxE,MAAM,aAAa;IACxB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAE9C,cAAc,CAAC,OAAgB;QAC7B,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAA2C,YAAY,GAAG,OAAO,CAAC,IAAI,EAAE;gBAChG,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAA2C,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5G,CAAC;IAED,GAAG,CAAC,IAAY;QACd,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAwB,YAAY,GAAG,IAAI,CAAC,CAAC;IACzE,CAAC;;0EAdU,aAAa;gGAAb,aAAa,WAAb,aAAa;6FAAb,aAAa;cADzB,wDAAU","file":"botmind-test-editor-src-lib-editor-module-es2015.js","sourcesContent":["import { Field, NgrxFormsFacade } from '@botmind-test/ngrx-forms';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { EditorFacade } from '../+state/editor.facade';\n\nconst structure: Field[] = [\n  {\n    type: 'INPUT',\n    name: 'title',\n    placeholder: 'Article Title',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'description',\n    placeholder: \"What's this article about?\",\n    validator: [Validators.required],\n  },\n  {\n    type: 'TEXTAREA',\n    name: 'body',\n    placeholder: 'Write your article (in markdown)',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'tagList',\n    placeholder: 'Enter Tags',\n    validator: [],\n  },\n];\n\n@Component({\n  selector: 'app-article-editor',\n  templateUrl: './article-editor.component.html',\n  styleUrls: ['./article-editor.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ArticleEditorComponent implements OnInit, OnDestroy {\n  structure$: Observable<Field[]>;\n  data$: Observable<any>;\n\n  constructor(private ngrxFormsFacade: NgrxFormsFacade, private router: Router, private facade: EditorFacade) {}\n\n  ngOnInit() {\n    this.ngrxFormsFacade.setStructure(structure);\n    this.data$ = this.ngrxFormsFacade.data$;\n    this.structure$ = this.ngrxFormsFacade.structure$;\n    this.facade.article$.subscribe((article) => this.ngrxFormsFacade.setData(article));\n  }\n\n  updateForm(changes: any) {\n    this.ngrxFormsFacade.updateData(changes);\n  }\n\n  submit() {\n    this.facade.publishArticle();\n  }\n\n  ngOnDestroy() {\n    this.ngrxFormsFacade.initializeForm();\n    this.facade.initializeArticle();\n  }\n}\n","<div class=\"editor-page\">\r\n  <div class=\"container page\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-10 offset-md-1 col-xs-12\">\r\n        <app-list-errors></app-list-errors>\r\n\r\n        <app-dynamic-form (updateForm)=\"updateForm($event)\" [data$]=\"data$\" [structure$]=\"structure$\">\r\n        </app-dynamic-form>\r\n\r\n        <button class=\"btn btn-lg pull-xs-right btn-primary\" type=\"button\" (click)=\"submit()\">\r\n          Publish Article\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { AuthGuardService } from '@botmind-test/auth';\nimport { NgrxFormsModule } from '@botmind-test/ngrx-forms';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { EditorEffects } from './+state/editor.effects';\nimport { EditorFacade } from './+state/editor.facade';\nimport { editorReducer, editorInitialState, editorFeatureKey } from './+state/editor.reducer';\nimport { ArticleEditorComponent } from './article-editor/article-editor.component';\nimport { EditorResolverService } from './editor-resolver.service';\nimport { EditorService } from './editor.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgrxFormsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: ArticleEditorComponent,\n        resolve: { EditorResolverService },\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: ':slug',\n        component: ArticleEditorComponent,\n        resolve: { EditorResolverService },\n      },\n    ]),\n    StoreModule.forFeature(editorFeatureKey, editorReducer, {\n      initialState: editorInitialState,\n    }),\n    EffectsModule.forFeature([EditorEffects]),\n  ],\n  declarations: [ArticleEditorComponent],\n  providers: [EditorEffects, EditorService, EditorResolverService, EditorFacade],\n})\nexport class EditorModule {}\n","import { NgrxFormsFacade, setErrors } from '@botmind-test/ngrx-forms';\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, map, withLatestFrom } from 'rxjs/operators';\n\nimport { EditorService } from '../editor.service';\nimport * as EditorActions from './editor.actions';\nimport { go } from '@botmind-test/ngrx-router';\n\n@Injectable()\nexport class EditorEffects {\n  publishArticle$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(EditorActions.publishArticle),\n      withLatestFrom(this.ngrxFormsFacade.data$),\n      concatMap(([_, data]) =>\n        this.editorService.publishArticle(data).pipe(\n          // TODO dispatch this action from the router facade when you refactor\n          map((result) =>\n            go({\n              to: { path: ['article', result.article.slug] },\n            }),\n          ),\n          catchError((result) => of(setErrors({ errors: result.error.errors }))),\n        ),\n      ),\n    ),\n  );\n\n  loadArticle$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(EditorActions.loadArticle),\n      concatMap((action) =>\n        this.editorService.get(action.id).pipe(\n          map((response) => EditorActions.loadArticleSuccess({ article: response.article })),\n          catchError((error) => of(EditorActions.loadArticleFail(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private ngrxFormsFacade: NgrxFormsFacade,\n    private editorService: EditorService,\n  ) {}\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { EditorFacade } from './+state/editor.facade';\r\n\r\n@Injectable()\r\nexport class EditorResolverService implements Resolve<Observable<boolean>> {\r\n  constructor(private facade: EditorFacade) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const slug = route.params['slug'];\r\n    if (slug) {\r\n      this.facade.loadArticle(slug);\r\n    }\r\n    return of(true);\r\n  }\r\n}\r\n","import { Article } from '@botmind-test/api';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport * as EditorActions from './editor.actions';\nimport { EditorState } from './editor.reducer';\nimport { editorQuery } from './editor.selectors';\n\n@Injectable()\nexport class EditorFacade {\n  article$ = this.store.select(editorQuery.getArticle);\n\n  constructor(private store: Store<EditorState>) {}\n\n  loadArticle(id: string) {\n    this.store.dispatch(EditorActions.loadArticle({ id }));\n  }\n\n  loadArticleSuccess(article: Article) {\n    this.store.dispatch(EditorActions.loadArticleSuccess({ article }));\n  }\n\n  loadArticleFail(error: Error) {\n    this.store.dispatch(EditorActions.loadArticleFail({ error }));\n  }\n\n  publishArticle() {\n    this.store.dispatch(EditorActions.publishArticle());\n  }\n\n  initializeArticle() {\n    this.store.dispatch(EditorActions.initializeArticle());\n  }\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { Editor, editorFeatureKey } from './editor.reducer';\r\n\r\nconst getEditor = createFeatureSelector<Editor>(editorFeatureKey);\r\nexport const getArticle = createSelector(getEditor, (state: Editor) => state.article);\r\n\r\nexport const editorQuery = {\r\n  getArticle,\r\n};\r\n","import { Article } from '@botmind-test/api';\nimport { createAction, props } from '@ngrx/store';\n\nexport const publishArticle = createAction('[editor] PUBLISH_ARTICLE');\nexport const initializeArticle = createAction('[editor] INITIALIZE_ARTICLE');\nexport const loadArticle = createAction('[editor] LOAD_ARTICLE', props<{ id: string }>());\nexport const loadArticleSuccess = createAction('[editor] LOAD_ARTICLE_SUCCESS', props<{ article: Article }>());\nexport const loadArticleFail = createAction('[editor] LOAD_ARTICLE_FAIL', props<{ error: Error }>());\n","import { Article } from '@botmind-test/api';\n\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as EditorActions from './editor.actions';\n\nexport const editorFeatureKey = 'editor';\n\nexport interface Editor {\n  article: Article;\n}\n\nexport interface EditorState {\n  readonly [editorFeatureKey]: Editor;\n}\n\nexport const editorInitialState: Editor = {\n  article: {\n    slug: '',\n    title: '',\n    description: '',\n    body: '',\n    tagList: [],\n    createdAt: '',\n    updatedAt: '',\n    favorited: false,\n    favoritesCount: 0,\n    author: {\n      username: '',\n      bio: '',\n      image: '',\n      following: false,\n      loading: false,\n    },\n  },\n};\n\nconst reducer = createReducer(\n  editorInitialState,\n  on(EditorActions.loadArticleSuccess, (state, action) => ({ ...state, article: action.article })),\n  on(EditorActions.loadArticleFail, EditorActions.initializeArticle, () => editorInitialState),\n);\n\nexport function editorReducer(state: Editor | undefined, action: Action): Editor {\n  return reducer(state, action);\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService, Article, SingleArticleResponse } from '@botmind-test/api';\nimport { NewArticleRequest } from './editor.interfaces';\n\n@Injectable()\nexport class EditorService {\n  constructor(private apiService: ApiService) {}\n\n  publishArticle(article: Article): Observable<SingleArticleResponse> {\n    if (article.slug) {\n      return this.apiService.put<SingleArticleResponse, NewArticleRequest>('/articles/' + article.slug, {\n        article: article,\n      });\n    }\n    return this.apiService.post<SingleArticleResponse, NewArticleRequest>('/articles/', { article: article });\n  }\n\n  get(slug: string): Observable<SingleArticleResponse> {\n    return this.apiService.get<SingleArticleResponse>('/articles/' + slug);\n  }\n}\n"],"sourceRoot":"webpack:///"}
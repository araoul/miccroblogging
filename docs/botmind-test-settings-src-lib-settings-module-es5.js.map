{"version":3,"sources":["webpack:///libs/settings/src/lib/+state/settings.effects.ts","webpack:///libs/settings/src/lib/settings/settings.component.ts","webpack:///libs/settings/src/lib/settings/settings.component.html","webpack:///libs/settings/src/lib/+state/settings.actions.ts","webpack:///libs/settings/src/lib/settings.module.ts","webpack:///libs/settings/src/lib/settings.service.ts"],"names":["SettingsEffects","actions$","settingsService","authFacade","ngrxFormsFacade","editSettings","pipe","data$","user$","_","data","user","image","username","bio","pass","email","update","result","to","path","errors","error","structure","type","name","placeholder","validator","required","attrs","SettingsComponent","store","router","setStructure","subscribe","setData","structure$","changes","updateData","dispatch","logout","updateForm","submit","selector","templateUrl","styleUrls","changeDetection","OnPush","SettingsModule","forChild","pathMatch","component","canActivate","forFeature","imports","declarations","providers","SettingsService","apiService","put"],"mappings":"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","file":"botmind-test-settings-src-lib-settings-module-es5.js","sourcesContent":["import { AuthFacade, getUser } from '@botmind-test/auth';\nimport { NgrxFormsFacade, setErrors } from '@botmind-test/ngrx-forms';\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, withLatestFrom } from 'rxjs/operators';\n\nimport { SettingsService } from '../settings.service';\nimport * as SettingsActions from './settings.actions';\nimport { go } from '@botmind-test/ngrx-router';\n\n@Injectable()\nexport class SettingsEffects {\n  editSettings = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SettingsActions.editSettings),\n      withLatestFrom(this.ngrxFormsFacade.data$, this.authFacade.user$),\n      map(([_, data, user]) => ({\n        ...user,\n        image: data.image,\n        username: data.username,\n        bio: data.bio,\n        pass: data.pass,\n        email: data.email,\n      })),\n      concatMap((data) =>\n        this.settingsService.update(data).pipe(\n          mergeMap((result) => [\n            getUser(),\n            go({\n              to: { path: ['profile', result.user.username] },\n            }),\n          ]),\n          catchError((result) => of(setErrors({ errors: result.error.errors }))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private settingsService: SettingsService,\n    private authFacade: AuthFacade,\n    private ngrxFormsFacade: NgrxFormsFacade,\n  ) {}\n}\n","import { AuthFacade } from '@botmind-test/auth';\nimport { Field, NgrxFormsFacade } from '@botmind-test/ngrx-forms';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { editSettings } from '../+state/settings.actions';\n\nconst structure: Field[] = [\n  {\n    type: 'INPUT',\n    name: 'image',\n    placeholder: 'URL of profile picture',\n    validator: [],\n  },\n  {\n    type: 'INPUT',\n    name: 'username',\n    placeholder: 'Your Name',\n    validator: [Validators.required],\n  },\n  {\n    type: 'TEXTAREA',\n    name: 'bio',\n    placeholder: 'Short bio about you',\n    validator: [],\n  },\n  {\n    type: 'INPUT',\n    name: 'email',\n    placeholder: 'Email',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'password',\n    placeholder: 'New Password',\n    validator: [Validators.required],\n    attrs: {\n      type: 'password',\n    },\n  },\n];\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettingsComponent implements OnInit {\n  structure$: Observable<Field[]>;\n  data$: Observable<any>;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private authFacade: AuthFacade,\n    private ngrxFormsFacade: NgrxFormsFacade,\n  ) {}\n\n  ngOnInit() {\n    this.ngrxFormsFacade.setStructure(structure);\n    this.authFacade.user$.subscribe((user) => this.ngrxFormsFacade.setData(user));\n    this.data$ = this.ngrxFormsFacade.data$;\n    this.structure$ = this.ngrxFormsFacade.structure$;\n  }\n\n  updateForm(changes: any) {\n    this.ngrxFormsFacade.updateData(changes);\n  }\n\n  submit() {\n    this.store.dispatch(editSettings());\n  }\n\n  logout() {\n    this.authFacade.logout();\n  }\n}\n","<div class=\"settings-page\">\r\n  <div class=\"container page\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 offset-md-3 col-xs-12\">\r\n        <h1 class=\"text-xs-center\">Your Settings</h1>\r\n\r\n        <app-list-errors></app-list-errors>\r\n\r\n        <app-dynamic-form (updateForm)=\"updateForm($event)\" [data$]=\"data$\" [structure$]=\"structure$\">\r\n        </app-dynamic-form>\r\n        <div class=\"edit-button-container\">\r\n          <button (click)=\"submit()\" class=\"btn btn-lg btn-primary pull-xs-right\" type=\"submit\">\r\n            Update Settings\r\n          </button>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <button class=\"btn btn-outline-danger\" (click)=\"logout()\">\r\n          Or click here to logout.\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { createAction } from '@ngrx/store';\r\n\r\nexport const editSettings = createAction('[settings] EDIT_SETTINGS');\r\n","import { AuthGuardService } from '@botmind-test/auth';\nimport { NgrxFormsModule } from '@botmind-test/ngrx-forms';\nimport { SettingsService } from './settings.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { SettingsEffects } from './+state/settings.effects';\nimport { SettingsComponent } from './settings/settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgrxFormsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: SettingsComponent,\n        canActivate: [AuthGuardService],\n      },\n    ]),\n    EffectsModule.forFeature([SettingsEffects]),\n  ],\n  declarations: [SettingsComponent],\n  providers: [SettingsEffects, SettingsService],\n})\nexport class SettingsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService, User, UserResponse } from '@botmind-test/api';\nimport { UpdateUserRequest } from '@botmind-test/settings/settings.interfaces';\n\n@Injectable()\nexport class SettingsService {\n  constructor(private apiService: ApiService) {}\n\n  update(user: User): Observable<UserResponse> {\n    return this.apiService.put<UserResponse, UpdateUserRequest>('/user', { user });\n  }\n}\n"]}
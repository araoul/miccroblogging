{"version":3,"sources":["webpack:///libs/editor/src/lib/article-editor/article-editor.component.ts","webpack:///libs/editor/src/lib/article-editor/article-editor.component.html","webpack:///libs/editor/src/lib/editor.module.ts","webpack:///libs/editor/src/lib/+state/editor.effects.ts","webpack:///libs/editor/src/lib/editor-resolver.service.ts","webpack:///libs/editor/src/lib/+state/editor.facade.ts","webpack:///libs/editor/src/lib/+state/editor.selectors.ts","webpack:///libs/editor/src/lib/+state/editor.actions.ts","webpack:///libs/editor/src/lib/+state/editor.reducer.ts","webpack:///libs/editor/src/lib/editor.service.ts"],"names":["structure","type","name","placeholder","validator","required","ArticleEditorComponent","ngrxFormsFacade","router","facade","setStructure","data$","structure$","article$","subscribe","article","setData","changes","updateData","publishArticle","initializeForm","initializeArticle","updateForm","submit","selector","templateUrl","styleUrls","changeDetection","OnPush","EditorModule","forChild","path","pathMatch","component","resolve","EditorResolverService","canActivate","forFeature","initialState","imports","declarations","providers","EditorEffects","actions$","editorService","publishArticle$","pipe","_","data","result","to","slug","errors","error","loadArticle$","action","get","id","response","route","state","params","loadArticle","EditorFacade","store","select","getArticle","dispatch","getEditor","editorQuery","loadArticleSuccess","loadArticleFail","editorFeatureKey","editorInitialState","title","description","body","tagList","createdAt","updatedAt","favorited","favoritesCount","author","username","bio","image","following","loading","reducer","editorReducer","EditorService","apiService","put","post"],"mappings":"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","file":"botmind-test-editor-src-lib-editor-module-es5.js","sourcesContent":["import { Field, NgrxFormsFacade } from '@botmind-test/ngrx-forms';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { EditorFacade } from '../+state/editor.facade';\n\nconst structure: Field[] = [\n  {\n    type: 'INPUT',\n    name: 'title',\n    placeholder: 'Article Title',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'description',\n    placeholder: \"What's this article about?\",\n    validator: [Validators.required],\n  },\n  {\n    type: 'TEXTAREA',\n    name: 'body',\n    placeholder: 'Write your article (in markdown)',\n    validator: [Validators.required],\n  },\n  {\n    type: 'INPUT',\n    name: 'tagList',\n    placeholder: 'Enter Tags',\n    validator: [],\n  },\n];\n\n@Component({\n  selector: 'app-article-editor',\n  templateUrl: './article-editor.component.html',\n  styleUrls: ['./article-editor.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ArticleEditorComponent implements OnInit, OnDestroy {\n  structure$: Observable<Field[]>;\n  data$: Observable<any>;\n\n  constructor(private ngrxFormsFacade: NgrxFormsFacade, private router: Router, private facade: EditorFacade) {}\n\n  ngOnInit() {\n    this.ngrxFormsFacade.setStructure(structure);\n    this.data$ = this.ngrxFormsFacade.data$;\n    this.structure$ = this.ngrxFormsFacade.structure$;\n    this.facade.article$.subscribe((article) => this.ngrxFormsFacade.setData(article));\n  }\n\n  updateForm(changes: any) {\n    this.ngrxFormsFacade.updateData(changes);\n  }\n\n  submit() {\n    this.facade.publishArticle();\n  }\n\n  ngOnDestroy() {\n    this.ngrxFormsFacade.initializeForm();\n    this.facade.initializeArticle();\n  }\n}\n","<div class=\"editor-page\">\r\n  <div class=\"container page\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-10 offset-md-1 col-xs-12\">\r\n        <app-list-errors></app-list-errors>\r\n\r\n        <app-dynamic-form (updateForm)=\"updateForm($event)\" [data$]=\"data$\" [structure$]=\"structure$\">\r\n        </app-dynamic-form>\r\n\r\n        <button class=\"btn btn-lg pull-xs-right btn-primary\" type=\"button\" (click)=\"submit()\">\r\n          Publish Article\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { AuthGuardService } from '@botmind-test/auth';\nimport { NgrxFormsModule } from '@botmind-test/ngrx-forms';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { EditorEffects } from './+state/editor.effects';\nimport { EditorFacade } from './+state/editor.facade';\nimport { editorReducer, editorInitialState, editorFeatureKey } from './+state/editor.reducer';\nimport { ArticleEditorComponent } from './article-editor/article-editor.component';\nimport { EditorResolverService } from './editor-resolver.service';\nimport { EditorService } from './editor.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgrxFormsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: ArticleEditorComponent,\n        resolve: { EditorResolverService },\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: ':slug',\n        component: ArticleEditorComponent,\n        resolve: { EditorResolverService },\n      },\n    ]),\n    StoreModule.forFeature(editorFeatureKey, editorReducer, {\n      initialState: editorInitialState,\n    }),\n    EffectsModule.forFeature([EditorEffects]),\n  ],\n  declarations: [ArticleEditorComponent],\n  providers: [EditorEffects, EditorService, EditorResolverService, EditorFacade],\n})\nexport class EditorModule {}\n","import { NgrxFormsFacade, setErrors } from '@botmind-test/ngrx-forms';\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, map, withLatestFrom } from 'rxjs/operators';\n\nimport { EditorService } from '../editor.service';\nimport * as EditorActions from './editor.actions';\nimport { go } from '@botmind-test/ngrx-router';\n\n@Injectable()\nexport class EditorEffects {\n  publishArticle$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(EditorActions.publishArticle),\n      withLatestFrom(this.ngrxFormsFacade.data$),\n      concatMap(([_, data]) =>\n        this.editorService.publishArticle(data).pipe(\n          // TODO dispatch this action from the router facade when you refactor\n          map((result) =>\n            go({\n              to: { path: ['article', result.article.slug] },\n            }),\n          ),\n          catchError((result) => of(setErrors({ errors: result.error.errors }))),\n        ),\n      ),\n    ),\n  );\n\n  loadArticle$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(EditorActions.loadArticle),\n      concatMap((action) =>\n        this.editorService.get(action.id).pipe(\n          map((response) => EditorActions.loadArticleSuccess({ article: response.article })),\n          catchError((error) => of(EditorActions.loadArticleFail(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private ngrxFormsFacade: NgrxFormsFacade,\n    private editorService: EditorService,\n  ) {}\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { EditorFacade } from './+state/editor.facade';\r\n\r\n@Injectable()\r\nexport class EditorResolverService implements Resolve<Observable<boolean>> {\r\n  constructor(private facade: EditorFacade) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const slug = route.params['slug'];\r\n    if (slug) {\r\n      this.facade.loadArticle(slug);\r\n    }\r\n    return of(true);\r\n  }\r\n}\r\n","import { Article } from '@botmind-test/api';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport * as EditorActions from './editor.actions';\nimport { EditorState } from './editor.reducer';\nimport { editorQuery } from './editor.selectors';\n\n@Injectable()\nexport class EditorFacade {\n  article$ = this.store.select(editorQuery.getArticle);\n\n  constructor(private store: Store<EditorState>) {}\n\n  loadArticle(id: string) {\n    this.store.dispatch(EditorActions.loadArticle({ id }));\n  }\n\n  loadArticleSuccess(article: Article) {\n    this.store.dispatch(EditorActions.loadArticleSuccess({ article }));\n  }\n\n  loadArticleFail(error: Error) {\n    this.store.dispatch(EditorActions.loadArticleFail({ error }));\n  }\n\n  publishArticle() {\n    this.store.dispatch(EditorActions.publishArticle());\n  }\n\n  initializeArticle() {\n    this.store.dispatch(EditorActions.initializeArticle());\n  }\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { Editor, editorFeatureKey } from './editor.reducer';\r\n\r\nconst getEditor = createFeatureSelector<Editor>(editorFeatureKey);\r\nexport const getArticle = createSelector(getEditor, (state: Editor) => state.article);\r\n\r\nexport const editorQuery = {\r\n  getArticle,\r\n};\r\n","import { Article } from '@botmind-test/api';\nimport { createAction, props } from '@ngrx/store';\n\nexport const publishArticle = createAction('[editor] PUBLISH_ARTICLE');\nexport const initializeArticle = createAction('[editor] INITIALIZE_ARTICLE');\nexport const loadArticle = createAction('[editor] LOAD_ARTICLE', props<{ id: string }>());\nexport const loadArticleSuccess = createAction('[editor] LOAD_ARTICLE_SUCCESS', props<{ article: Article }>());\nexport const loadArticleFail = createAction('[editor] LOAD_ARTICLE_FAIL', props<{ error: Error }>());\n","import { Article } from '@botmind-test/api';\n\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as EditorActions from './editor.actions';\n\nexport const editorFeatureKey = 'editor';\n\nexport interface Editor {\n  article: Article;\n}\n\nexport interface EditorState {\n  readonly [editorFeatureKey]: Editor;\n}\n\nexport const editorInitialState: Editor = {\n  article: {\n    slug: '',\n    title: '',\n    description: '',\n    body: '',\n    tagList: [],\n    createdAt: '',\n    updatedAt: '',\n    favorited: false,\n    favoritesCount: 0,\n    author: {\n      username: '',\n      bio: '',\n      image: '',\n      following: false,\n      loading: false,\n    },\n  },\n};\n\nconst reducer = createReducer(\n  editorInitialState,\n  on(EditorActions.loadArticleSuccess, (state, action) => ({ ...state, article: action.article })),\n  on(EditorActions.loadArticleFail, EditorActions.initializeArticle, () => editorInitialState),\n);\n\nexport function editorReducer(state: Editor | undefined, action: Action): Editor {\n  return reducer(state, action);\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService, Article, SingleArticleResponse } from '@botmind-test/api';\nimport { NewArticleRequest } from './editor.interfaces';\n\n@Injectable()\nexport class EditorService {\n  constructor(private apiService: ApiService) {}\n\n  publishArticle(article: Article): Observable<SingleArticleResponse> {\n    if (article.slug) {\n      return this.apiService.put<SingleArticleResponse, NewArticleRequest>('/articles/' + article.slug, {\n        article: article,\n      });\n    }\n    return this.apiService.post<SingleArticleResponse, NewArticleRequest>('/articles/', { article: article });\n  }\n\n  get(slug: string): Observable<SingleArticleResponse> {\n    return this.apiService.get<SingleArticleResponse>('/articles/' + slug);\n  }\n}\n"]}